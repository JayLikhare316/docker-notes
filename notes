<<<<<<< HEAD
##install docker in linux.
sudo yum install docker -y
=======
DOCKER

#Q.What is Docker? Why we need docker?
A. Docker is a containerization platform that allows developers to package, ship, and run applications in
containers. Containers are lightweight and portable, making it easier to develop, test, and deploy applications.

#Q.What are containers?
A. Containers are a type of virtualization that allows multiple applications to run on a single host operating
system, each with its own isolated environment. Containers share the host operating system, but each container
has its own file system, network stack, and process space.

#Q.Virtualizer vs hypervisor?
A. Hypervisor is a type of virtualization that creates a separate operating system for each virtual machin
(HVM), whereas virtualizer is a type of virtualization that runs on top of a host operating
system and shares the host operating system with the guest operating system (non-HVM).

#Q.Monolythic app vs Microservice app?
A. Monolythic app is a single application that performs multiple functions, whereas microservice app is 
a collection of small, independent services that work together to perform a specific function.


#install docker in linux.
>>>>>>> 9a0876a8232647d2b21139d1b534247c332bd93a

##enable & start docker
sudo systemctl enable docker
sudo systemctl start docker
sudo ststemctl status docker


## to list docker images
sudo docker images

##to list docker containers
sudo docker ps -a --> to see all stopped containers
sudo docker ps
<<<<<<< HEAD

##to run containers
sudo docker run -d -p instance-port:container port container name or container ID (-d for detached -p for port forwarding -P for random port forwording)
sudo docker run -itd amazonlinux bash
=======
sudo docker run -itd amazonlinux

>>>>>>> 9a0876a8232647d2b21139d1b534247c332bd93a
hove to go inside container 
sudo docker exec -it 6f90d0eac55d bash
sudo docker -it <container_id> /bin/bash --> to go inside the docker shell
cd usr/share/nginx.html/
rm index.html
echo "hello world" > index.html
sudo docker inspect <container_id> --> to inspect docker container 
sudo docker logs <container_id> --> to get logs of the container
sudo docker stop <container_id> --> to stop the container
sudo docker start <container_id> --> to start the container
sudo docker rm <container_id> --> to remove the container
sudo docker rmi <image_id> --> to remove the image
sudo docker rmi -f <image_id> --> to remove the image forcefully
<<<<<<< HEAD
sudo docker commit <container_id> --> to save container as image
sudo docker image 
=======
sudo docker commit <container_id> 
sudo docker image --> to see all images for docker
>>>>>>> 9a0876a8232647d2b21139d1b534247c332bd93a
sudo docker tag <image_id> <new_image_name> --> to tag the image

#login into the docker account in linux

sudo docker login --> to login into the docker
sudo docker push <docker provided name> -->
sudo docker run --name <> -d -P <name of repo>
sudo docker tag demo (username)/(reponame)
sudo docker push (username)/(reponame):latest

#if I want to create my private image you can use ECR

you have to create a ec2 role for ecr <ec2containerregistryfullaccess>
copy login command
aws ecr get-login-password --region <region> --profile <profile> | sudo docker login --username AWS 
sudo docker tag <image_id> <account_id>.dkr.ecr.<region>.amazonaws  (add sudo command always after |)
sudo docker push <account_id>.dkr.ecr.<region>.amazonaws/<image_name>
sudo docker pull <account_id>.dkr.ecr.<region>.amazonaws/<image_name>

task:-
task1)
# get the docker image of amazon linux
sudo docker pull amazonlinux
sudo docker exec run -itd -p 80:8080 amazonlinux
# add tomcat package
# add student ui

# then commit the image 
# store on ecr as well as docker hub

task2)

# get the docker image of amazon linux
# install nginx
# add free css

task3)

# host mysql container
# -e (enviornment variables)
# use msql user/mysql password

####12/12/2024

task4)
#create a daemon service of tomcat

##root directory of docker 
/var/lib/docker/

##docker configuration files
/etc/docker
docker volumes

##docker socket file location
/var/run/docker.

##what is socket file ?
##A socket file, also known as a Unix domain socket, is a special file that facilitates inter-process
##communication (IPC) on the same host system. 

##to create a storage universal in docker
docker create volume

##To LIst volumes
docker volume ls

##how to attach volume in container 

sudo docker run -d -v dev:/usr/share/nginx/html --name -P nginx
##sudo -v for volume dev for volume name :path to mount volume --name for adding name to container

what is dockerfile ?


dockerfile is written in golang language
ENTRY POINT --> COMMAND TO RUN IN CONTAINER
CMD --> CONTAINER
FROM --> BASE IMAGE 
RUN --> TO EXCUTE SHELL COMMANDS
COPY --> FROM LOCAL TO CONTAINER COPY
ADD --> TO DOWNLOAD
EXPOSE --> PORTS 

##DOCKERFILE

FROM nginx 
COPY oxer-html /usr/share/nginx/html/.

how to build docker image from dockerfile ?

sudo docker build -t .

##docker file

FROM amazonlinux

RUN yum update && yum install nginx -y
EXPOSE 80
CMD ["/usr/sbin/nginx" , "-g", "daemon off;"]

##docker file

FROM amazonlinux
RUN yum update && yum install java-17 -y && yum install unzip -y
ADD tomcat-
RUN unzip tomcat-
RUN chmod 777 tomcat-/bin/catalina.sh

EXPOSE 8080

CMD ["apache/bin/catalina.sh", "start"]

what is deffirence between entrypoint and CMD ?

if dockerfile has many layers then the image will be heavy in size 
